{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar PropTypes = _interopRequireWildcard(require(\"prop-types\"));\n\nvar _staticMap = _interopRequireWildcard(require(\"./static-map\"));\n\nvar _mapState = require(\"../utils/map-state\");\n\nvar _transitionManager = _interopRequireDefault(require(\"../utils/transition-manager\"));\n\nvar _mapContext = _interopRequireWildcard(require(\"./map-context\"));\n\nvar _mjolnir = require(\"mjolnir.js\");\n\nvar _mapController = _interopRequireDefault(require(\"../utils/map-controller\"));\n\nvar _useIsomorphicLayoutEffect = _interopRequireDefault(require(\"../utils/use-isomorphic-layout-effect\"));\n\nvar _terrain = require(\"../utils/terrain\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar propTypes = Object.assign({}, _staticMap[\"default\"].propTypes, {\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  maxPitch: PropTypes.number,\n  minPitch: PropTypes.number,\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n  onInteractionStateChange: PropTypes.func,\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  transitionInterpolator: PropTypes.object,\n  transitionInterruption: PropTypes.number,\n  transitionEasing: PropTypes.func,\n  onTransitionStart: PropTypes.func,\n  onTransitionInterrupt: PropTypes.func,\n  onTransitionEnd: PropTypes.func,\n  scrollZoom: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  dragPan: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  dragRotate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  doubleClickZoom: PropTypes.bool,\n  touchZoom: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  touchRotate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  keyboard: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onDblClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onTouchStart: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onWheel: PropTypes.func,\n  touchAction: PropTypes.string,\n  eventRecognizerOptions: PropTypes.object,\n  clickRadius: PropTypes.number,\n  interactiveLayerIds: PropTypes.array,\n  getCursor: PropTypes.func,\n  controller: PropTypes.instanceOf(_mapController[\"default\"])\n});\n\nvar getDefaultCursor = function getDefaultCursor(_ref) {\n  var isDragging = _ref.isDragging,\n      isHovering = _ref.isHovering;\n  return isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab';\n};\n\nvar defaultProps = Object.assign({}, _staticMap[\"default\"].defaultProps, _mapState.MAPBOX_LIMITS, _transitionManager[\"default\"].defaultProps, {\n  onViewStateChange: null,\n  onViewportChange: null,\n  onClick: null,\n  onNativeClick: null,\n  onHover: null,\n  onContextMenu: function onContextMenu(event) {\n    return event.preventDefault();\n  },\n  scrollZoom: true,\n  dragPan: true,\n  dragRotate: true,\n  doubleClickZoom: true,\n  touchZoom: true,\n  touchRotate: false,\n  keyboard: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  clickRadius: 0,\n  getCursor: getDefaultCursor\n});\n\nfunction normalizeEvent(event) {\n  if (event.lngLat || !event.offsetCenter) {\n    return event;\n  }\n\n  var _event$offsetCenter = event.offsetCenter,\n      x = _event$offsetCenter.x,\n      y = _event$offsetCenter.y;\n\n  if (!Number.isFinite(x) || !Number.isFinite(y)) {\n    return event;\n  }\n\n  var pos = [x, y];\n  event.point = pos;\n\n  if (this.map) {\n    var location = this.map.unproject(pos);\n    event.lngLat = [location.lng, location.lat];\n  }\n\n  return event;\n}\n\nfunction getFeatures(pos) {\n  var map = this.map;\n\n  if (!map || !pos) {\n    return null;\n  }\n\n  var queryParams = {};\n  var size = this.props.clickRadius;\n\n  if (this.props.interactiveLayerIds) {\n    queryParams.layers = this.props.interactiveLayerIds;\n  }\n\n  try {\n    return map.queryRenderedFeatures(size ? [[pos[0] - size, pos[1] + size], [pos[0] + size, pos[1] - size]] : pos, queryParams);\n  } catch (_unused) {\n    return null;\n  }\n}\n\nfunction onEvent(callbackName, event) {\n  var func = this.props[callbackName];\n\n  if (func) {\n    func(normalizeEvent.call(this, event));\n  }\n}\n\nfunction onPointerDown(event) {\n  onEvent.call(this, event.pointerType === 'touch' ? 'onTouchStart' : 'onMouseDown', event);\n}\n\nfunction onPointerUp(event) {\n  onEvent.call(this, event.pointerType === 'touch' ? 'onTouchEnd' : 'onMouseUp', event);\n}\n\nfunction onPointerMove(event) {\n  onEvent.call(this, event.pointerType === 'touch' ? 'onTouchMove' : 'onMouseMove', event);\n\n  if (!this.state.isDragging) {\n    var _this$props = this.props,\n        onHover = _this$props.onHover,\n        interactiveLayerIds = _this$props.interactiveLayerIds;\n    var features;\n    event = normalizeEvent.call(this, event);\n\n    if (interactiveLayerIds || onHover) {\n      features = getFeatures.call(this, event.point);\n    }\n\n    var isHovering = Boolean(interactiveLayerIds && features && features.length > 0);\n    var isEntering = isHovering && !this.state.isHovering;\n    var isExiting = !isHovering && this.state.isHovering;\n\n    if (onHover || isEntering) {\n      event.features = features;\n\n      if (onHover) {\n        onHover(event);\n      }\n    }\n\n    if (isEntering) {\n      onEvent.call(this, 'onMouseEnter', event);\n    }\n\n    if (isExiting) {\n      onEvent.call(this, 'onMouseLeave', event);\n    }\n\n    if (isEntering || isExiting) {\n      this.setState({\n        isHovering: isHovering\n      });\n    }\n  }\n}\n\nfunction onPointerClick(event) {\n  var _this$props2 = this.props,\n      onClick = _this$props2.onClick,\n      onNativeClick = _this$props2.onNativeClick,\n      onDblClick = _this$props2.onDblClick,\n      doubleClickZoom = _this$props2.doubleClickZoom;\n  var callbacks = [];\n  var isDoubleClickEnabled = onDblClick || doubleClickZoom;\n\n  switch (event.type) {\n    case 'anyclick':\n      callbacks.push(onNativeClick);\n\n      if (!isDoubleClickEnabled) {\n        callbacks.push(onClick);\n      }\n\n      break;\n\n    case 'click':\n      if (isDoubleClickEnabled) {\n        callbacks.push(onClick);\n      }\n\n      break;\n\n    default:\n  }\n\n  callbacks = callbacks.filter(Boolean);\n\n  if (callbacks.length) {\n    event = normalizeEvent.call(this, event);\n    event.features = getFeatures.call(this, event.point);\n    callbacks.forEach(function (cb) {\n      return cb(event);\n    });\n  }\n}\n\nfunction getRefHandles(staticMapRef) {\n  return {\n    getMap: staticMapRef.current && staticMapRef.current.getMap,\n    queryRenderedFeatures: staticMapRef.current && staticMapRef.current.queryRenderedFeatures\n  };\n}\n\nvar InteractiveMap = (0, React.forwardRef)(function (props, ref) {\n  var parentContext = (0, React.useContext)(_mapContext[\"default\"]);\n  var controller = (0, React.useMemo)(function () {\n    return props.controller || new _mapController[\"default\"]();\n  }, []);\n  var eventManager = (0, React.useMemo)(function () {\n    return new _mjolnir.EventManager(null, {\n      touchAction: props.touchAction,\n      recognizerOptions: props.eventRecognizerOptions\n    });\n  }, []);\n  var eventCanvasRef = (0, React.useRef)(null);\n  var staticMapRef = (0, React.useRef)(null);\n\n  var _thisRef = (0, React.useRef)({\n    width: 0,\n    height: 0,\n    state: {\n      isHovering: false,\n      isDragging: false\n    }\n  });\n\n  var thisRef = _thisRef.current;\n  thisRef.props = props;\n  thisRef.map = staticMapRef.current && staticMapRef.current.getMap();\n\n  thisRef.setState = function (newState) {\n    thisRef.state = _objectSpread(_objectSpread({}, thisRef.state), newState);\n    eventCanvasRef.current.style.cursor = props.getCursor(thisRef.state);\n  };\n\n  var inRender = true;\n  var viewportUpdateRequested;\n  var stateUpdateRequested;\n\n  var handleViewportChange = function handleViewportChange(viewState, interactionState, oldViewState) {\n    if (inRender) {\n      viewportUpdateRequested = [viewState, interactionState, oldViewState];\n      return;\n    }\n\n    var _thisRef$props = thisRef.props,\n        onViewStateChange = _thisRef$props.onViewStateChange,\n        onViewportChange = _thisRef$props.onViewportChange;\n    Object.defineProperty(viewState, 'position', {\n      get: function get() {\n        return [0, 0, (0, _terrain.getTerrainElevation)(thisRef.map, viewState)];\n      }\n    });\n\n    if (onViewStateChange) {\n      onViewStateChange({\n        viewState: viewState,\n        interactionState: interactionState,\n        oldViewState: oldViewState\n      });\n    }\n\n    if (onViewportChange) {\n      onViewportChange(viewState, interactionState, oldViewState);\n    }\n  };\n\n  (0, React.useImperativeHandle)(ref, function () {\n    return getRefHandles(staticMapRef);\n  }, []);\n  var context = (0, React.useMemo)(function () {\n    return _objectSpread(_objectSpread({}, parentContext), {}, {\n      eventManager: eventManager,\n      container: parentContext.container || eventCanvasRef.current\n    });\n  }, [parentContext, eventCanvasRef.current]);\n  context.onViewportChange = handleViewportChange;\n  context.viewport = parentContext.viewport || (0, _staticMap.getViewport)(thisRef);\n  thisRef.viewport = context.viewport;\n\n  var handleInteractionStateChange = function handleInteractionStateChange(interactionState) {\n    var _interactionState$isD = interactionState.isDragging,\n        isDragging = _interactionState$isD === void 0 ? false : _interactionState$isD;\n\n    if (isDragging !== thisRef.state.isDragging) {\n      thisRef.setState({\n        isDragging: isDragging\n      });\n    }\n\n    if (inRender) {\n      stateUpdateRequested = interactionState;\n      return;\n    }\n\n    var onInteractionStateChange = thisRef.props.onInteractionStateChange;\n\n    if (onInteractionStateChange) {\n      onInteractionStateChange(interactionState);\n    }\n  };\n\n  var updateControllerOpts = function updateControllerOpts() {\n    if (thisRef.width && thisRef.height) {\n      controller.setOptions(_objectSpread(_objectSpread(_objectSpread({}, thisRef.props), thisRef.props.viewState), {}, {\n        isInteractive: Boolean(thisRef.props.onViewStateChange || thisRef.props.onViewportChange),\n        onViewportChange: handleViewportChange,\n        onStateChange: handleInteractionStateChange,\n        eventManager: eventManager,\n        width: thisRef.width,\n        height: thisRef.height\n      }));\n    }\n  };\n\n  var onResize = function onResize(_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    thisRef.width = width;\n    thisRef.height = height;\n    updateControllerOpts();\n    thisRef.props.onResize({\n      width: width,\n      height: height\n    });\n  };\n\n  (0, React.useEffect)(function () {\n    eventManager.setElement(eventCanvasRef.current);\n    eventManager.on({\n      pointerdown: onPointerDown.bind(thisRef),\n      pointermove: onPointerMove.bind(thisRef),\n      pointerup: onPointerUp.bind(thisRef),\n      pointerleave: onEvent.bind(thisRef, 'onMouseOut'),\n      click: onPointerClick.bind(thisRef),\n      anyclick: onPointerClick.bind(thisRef),\n      dblclick: onEvent.bind(thisRef, 'onDblClick'),\n      wheel: onEvent.bind(thisRef, 'onWheel'),\n      contextmenu: onEvent.bind(thisRef, 'onContextMenu')\n    });\n    return function () {\n      eventManager.destroy();\n    };\n  }, []);\n  (0, _useIsomorphicLayoutEffect[\"default\"])(function () {\n    if (viewportUpdateRequested) {\n      handleViewportChange.apply(void 0, (0, _toConsumableArray2[\"default\"])(viewportUpdateRequested));\n    }\n\n    if (stateUpdateRequested) {\n      handleInteractionStateChange(stateUpdateRequested);\n    }\n  });\n  updateControllerOpts();\n  var width = props.width,\n      height = props.height,\n      style = props.style,\n      getCursor = props.getCursor;\n  var eventCanvasStyle = (0, React.useMemo)(function () {\n    return _objectSpread(_objectSpread({\n      position: 'relative'\n    }, style), {}, {\n      width: width,\n      height: height,\n      cursor: getCursor(thisRef.state)\n    });\n  }, [style, width, height, getCursor, thisRef.state]);\n\n  if (!viewportUpdateRequested || !thisRef._child) {\n    thisRef._child = React.createElement(_mapContext.MapContextProvider, {\n      value: context\n    }, React.createElement(\"div\", {\n      key: \"event-canvas\",\n      ref: eventCanvasRef,\n      style: eventCanvasStyle\n    }, React.createElement(_staticMap[\"default\"], (0, _extends2[\"default\"])({}, props, {\n      width: \"100%\",\n      height: \"100%\",\n      style: null,\n      onResize: onResize,\n      ref: staticMapRef\n    }))));\n  }\n\n  inRender = false;\n  return thisRef._child;\n});\nInteractiveMap.supported = _staticMap[\"default\"].supported;\nInteractiveMap.propTypes = propTypes;\nInteractiveMap.defaultProps = defaultProps;\nvar _default = InteractiveMap;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:\\Side Projects\\maptravelapp\\frontend\\node_modules\\react-map-gl\\src\\components\\interactive-map.js"],"names":["propTypes","StaticMap","maxZoom","PropTypes","minZoom","maxPitch","minPitch","onViewStateChange","onViewportChange","onInteractionStateChange","transitionDuration","transitionInterpolator","transitionInterruption","transitionEasing","onTransitionStart","onTransitionInterrupt","onTransitionEnd","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","onHover","onClick","onDblClick","onContextMenu","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onMouseEnter","onMouseLeave","onMouseOut","onWheel","touchAction","eventRecognizerOptions","clickRadius","interactiveLayerIds","getCursor","controller","MapController","getDefaultCursor","isDragging","isHovering","defaultProps","MAPBOX_LIMITS","TransitionManager","onNativeClick","event","x","y","Number","pos","location","map","queryParams","size","func","normalizeEvent","onEvent","features","getFeatures","Boolean","isEntering","isExiting","callbacks","isDoubleClickEnabled","cb","getMap","staticMapRef","queryRenderedFeatures","InteractiveMap","parentContext","MapContext","props","eventManager","EventManager","recognizerOptions","eventCanvasRef","_thisRef","width","height","state","thisRef","inRender","handleViewportChange","viewportUpdateRequested","Object","get","viewState","interactionState","oldViewState","getRefHandles","context","container","current","handleInteractionStateChange","stateUpdateRequested","updateControllerOpts","isInteractive","onStateChange","onResize","pointerdown","onPointerDown","pointermove","onPointerMove","pointerup","onPointerUp","pointerleave","click","onPointerClick","anyclick","dblclick","wheel","contextmenu","style","eventCanvasStyle","position","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {useContext, useRef, useMemo, useEffect, useImperativeHandle, forwardRef} from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport StaticMap, {getViewport} from './static-map';\nimport {MAPBOX_LIMITS} from '../utils/map-state';\n\nimport TransitionManager from '../utils/transition-manager';\nimport MapContext, {MapContextProvider} from './map-context';\n\nimport {EventManager} from 'mjolnir.js';\nimport MapController from '../utils/map-controller';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport {getTerrainElevation} from '../utils/terrain';\n\nconst propTypes = Object.assign({}, StaticMap.propTypes, {\n  // Additional props on top of StaticMap\n\n  /** Viewport constraints */\n  // Max zoom level\n  maxZoom: PropTypes.number,\n  // Min zoom level\n  minZoom: PropTypes.number,\n  // Max pitch in degrees\n  maxPitch: PropTypes.number,\n  // Min pitch in degrees\n  minPitch: PropTypes.number,\n\n  // Callbacks fired when the user interacted with the map. The object passed to the callbacks\n  // contains viewport properties such as `longitude`, `latitude`, `zoom` etc.\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n  onInteractionStateChange: PropTypes.func,\n\n  /** Viewport transition **/\n  // transition duration for viewport change\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // TransitionInterpolator instance, can be used to perform custom transitions.\n  transitionInterpolator: PropTypes.object,\n  // type of interruption of current transition on update.\n  transitionInterruption: PropTypes.number,\n  // easing function\n  transitionEasing: PropTypes.func,\n  // transition status update functions\n  onTransitionStart: PropTypes.func,\n  onTransitionInterrupt: PropTypes.func,\n  onTransitionEnd: PropTypes.func,\n\n  /** Enables control event handling */\n  // Scroll to zoom\n  scrollZoom: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  // Drag to pan\n  dragPan: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  // Drag to rotate\n  dragRotate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  // Double click to zoom\n  doubleClickZoom: PropTypes.bool,\n  // Multitouch zoom\n  touchZoom: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  // Multitouch rotate\n  touchRotate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  // Keyboard\n  keyboard: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n\n  /** Event callbacks */\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onDblClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onTouchStart: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onWheel: PropTypes.func,\n\n  /** Custom touch-action CSS for the event canvas. Defaults to 'none' */\n  touchAction: PropTypes.string,\n\n  /** Custom hammer.js recognizer options */\n  eventRecognizerOptions: PropTypes.object,\n\n  /** Radius to detect features around a clicked point. Defaults to 0. */\n  clickRadius: PropTypes.number,\n\n  /** List of layers that are interactive */\n  interactiveLayerIds: PropTypes.array,\n\n  /** Accessor that returns a cursor style to show interactive state */\n  getCursor: PropTypes.func,\n\n  // A map control instance to replace the default map controller\n  // The object must expose a method: `setOptions(opts)`\n  controller: PropTypes.instanceOf(MapController)\n});\n\nconst getDefaultCursor = ({isDragging, isHovering}) =>\n  isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab';\n\nconst defaultProps = Object.assign(\n  {},\n  StaticMap.defaultProps,\n  MAPBOX_LIMITS,\n  TransitionManager.defaultProps,\n  {\n    onViewStateChange: null,\n    onViewportChange: null,\n    onClick: null,\n    onNativeClick: null,\n    onHover: null,\n    onContextMenu: event => event.preventDefault(),\n\n    scrollZoom: true,\n    dragPan: true,\n    dragRotate: true,\n    doubleClickZoom: true,\n    touchZoom: true,\n    touchRotate: false,\n    keyboard: true,\n\n    touchAction: 'none',\n    eventRecognizerOptions: {},\n    clickRadius: 0,\n    getCursor: getDefaultCursor\n  }\n);\n\n/* Event handlers */\nfunction normalizeEvent(event) {\n  if (event.lngLat || !event.offsetCenter) {\n    return event;\n  }\n\n  const {\n    offsetCenter: {x, y}\n  } = event;\n  // https://github.com/visgl/react-map-gl/issues/1449\n  // TODO - fix in mjolnir.js\n  if (!Number.isFinite(x) || !Number.isFinite(y)) {\n    return event;\n  }\n  const pos = [x, y];\n\n  event.point = pos;\n\n  if (this.map) {\n    const location = this.map.unproject(pos);\n    event.lngLat = [location.lng, location.lat];\n  }\n\n  return event;\n}\n\nfunction getFeatures(pos) {\n  const {map} = this;\n\n  if (!map || !pos) {\n    return null;\n  }\n\n  const queryParams = {};\n  const size = this.props.clickRadius;\n\n  if (this.props.interactiveLayerIds) {\n    queryParams.layers = this.props.interactiveLayerIds;\n  }\n\n  try {\n    // This may fail if map is still loading\n    return map.queryRenderedFeatures(\n      size\n        ? // Radius enables point features, like marker symbols, to be clicked.\n          [\n            [pos[0] - size, pos[1] + size],\n            [pos[0] + size, pos[1] - size]\n          ]\n        : pos,\n      queryParams\n    );\n  } catch {\n    return null;\n  }\n}\n\nfunction onEvent(callbackName, event) {\n  const func = this.props[callbackName];\n  if (func) {\n    func(normalizeEvent.call(this, event));\n  }\n}\n\nfunction onPointerDown(event) {\n  onEvent.call(this, event.pointerType === 'touch' ? 'onTouchStart' : 'onMouseDown', event);\n}\n\nfunction onPointerUp(event) {\n  onEvent.call(this, event.pointerType === 'touch' ? 'onTouchEnd' : 'onMouseUp', event);\n}\n\n// eslint-disable-next-line complexity\nfunction onPointerMove(event) {\n  onEvent.call(this, event.pointerType === 'touch' ? 'onTouchMove' : 'onMouseMove', event);\n\n  if (!this.state.isDragging) {\n    const {onHover, interactiveLayerIds} = this.props;\n    let features;\n    event = normalizeEvent.call(this, event);\n    if (interactiveLayerIds || onHover) {\n      features = getFeatures.call(this, event.point);\n    }\n\n    const isHovering = Boolean(interactiveLayerIds && features && features.length > 0);\n    const isEntering = isHovering && !this.state.isHovering;\n    const isExiting = !isHovering && this.state.isHovering;\n\n    if (onHover || isEntering) {\n      event.features = features;\n\n      // backward compatibility: v3 `onHover` interface\n      if (onHover) {\n        onHover(event);\n      }\n    }\n\n    if (isEntering) {\n      onEvent.call(this, 'onMouseEnter', event);\n    }\n    if (isExiting) {\n      onEvent.call(this, 'onMouseLeave', event);\n    }\n    if (isEntering || isExiting) {\n      this.setState({isHovering});\n    }\n  }\n}\n\nfunction onPointerClick(event) {\n  const {onClick, onNativeClick, onDblClick, doubleClickZoom} = this.props;\n  let callbacks = [];\n  const isDoubleClickEnabled = onDblClick || doubleClickZoom;\n\n  // `click` is only fired on single click. `anyclick` is fired twice if double clicking.\n  // `click` has a delay period after pointer up that prevents it from firing when\n  // double clicking. `anyclick` is always fired immediately after pointer up.\n  // If double click is turned off by the user, we want to immediately fire the\n  // onClick event. Otherwise, we wait to make sure it's a single click.\n  switch (event.type) {\n    case 'anyclick':\n      callbacks.push(onNativeClick);\n      if (!isDoubleClickEnabled) {\n        callbacks.push(onClick);\n      }\n      break;\n\n    case 'click':\n      if (isDoubleClickEnabled) {\n        callbacks.push(onClick);\n      }\n      break;\n\n    default:\n  }\n\n  callbacks = callbacks.filter(Boolean);\n\n  if (callbacks.length) {\n    event = normalizeEvent.call(this, event);\n    // backward compatibility: v3 `onClick` interface\n    event.features = getFeatures.call(this, event.point);\n    callbacks.forEach(cb => cb(event));\n  }\n}\n/* End of event handers */\n\nfunction getRefHandles(staticMapRef) {\n  return {\n    getMap: staticMapRef.current && staticMapRef.current.getMap,\n    queryRenderedFeatures: staticMapRef.current && staticMapRef.current.queryRenderedFeatures\n  };\n}\n\n/* eslint-disable max-statements */\nconst InteractiveMap = forwardRef((props, ref) => {\n  const parentContext = useContext(MapContext);\n  const controller = useMemo(() => props.controller || new MapController(), []);\n  const eventManager = useMemo(\n    () =>\n      new EventManager(null, {\n        touchAction: props.touchAction,\n        recognizerOptions: props.eventRecognizerOptions\n      }),\n    []\n  );\n  const eventCanvasRef = useRef(null);\n  const staticMapRef = useRef(null);\n\n  // Event handlers are registered once but need access to the latest props\n  // This is an anti-pattern, though it maintains a persistent reference to the latest props/state of this component\n  const _thisRef = useRef({\n    width: 0,\n    height: 0,\n    state: {\n      isHovering: false,\n      isDragging: false\n    }\n  });\n  const thisRef = _thisRef.current;\n  thisRef.props = props;\n  thisRef.map = staticMapRef.current && staticMapRef.current.getMap();\n  thisRef.setState = newState => {\n    thisRef.state = {...thisRef.state, ...newState};\n    eventCanvasRef.current.style.cursor = props.getCursor(thisRef.state);\n  };\n\n  let inRender = true;\n  let viewportUpdateRequested;\n  let stateUpdateRequested;\n\n  const handleViewportChange = (viewState, interactionState, oldViewState) => {\n    if (inRender) {\n      // Do not call the callbacks during render - may result in \"cannot update during an existing state transition\" error.\n      // Defer the update until after render\n      viewportUpdateRequested = [viewState, interactionState, oldViewState];\n      return;\n    }\n    const {onViewStateChange, onViewportChange} = thisRef.props;\n\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(viewState, 'position', {\n      get: () => [0, 0, getTerrainElevation(thisRef.map, viewState)]\n    });\n\n    if (onViewStateChange) {\n      onViewStateChange({viewState, interactionState, oldViewState});\n    }\n    if (onViewportChange) {\n      onViewportChange(viewState, interactionState, oldViewState);\n    }\n  };\n\n  useImperativeHandle(ref, () => getRefHandles(staticMapRef), []);\n\n  const context = useMemo(\n    () => ({\n      ...parentContext,\n      eventManager,\n      container: parentContext.container || eventCanvasRef.current\n    }),\n    [parentContext, eventCanvasRef.current]\n  );\n  context.onViewportChange = handleViewportChange;\n  context.viewport = parentContext.viewport || getViewport(thisRef);\n  thisRef.viewport = context.viewport;\n\n  const handleInteractionStateChange = interactionState => {\n    const {isDragging = false} = interactionState;\n    if (isDragging !== thisRef.state.isDragging) {\n      thisRef.setState({isDragging});\n    }\n\n    if (inRender) {\n      // Do not call the callbacks during render - may result in \"cannot update during an existing state transition\" error.\n      // Defer the update until after render\n      stateUpdateRequested = interactionState;\n      return;\n    }\n\n    const {onInteractionStateChange} = thisRef.props;\n    if (onInteractionStateChange) {\n      onInteractionStateChange(interactionState);\n    }\n  };\n\n  const updateControllerOpts = () => {\n    if (thisRef.width && thisRef.height) {\n      controller.setOptions({\n        ...thisRef.props,\n        ...thisRef.props.viewState,\n        isInteractive: Boolean(thisRef.props.onViewStateChange || thisRef.props.onViewportChange),\n        onViewportChange: handleViewportChange,\n        onStateChange: handleInteractionStateChange,\n        eventManager,\n        width: thisRef.width,\n        height: thisRef.height\n      });\n    }\n  };\n\n  const onResize = ({width, height}) => {\n    thisRef.width = width;\n    thisRef.height = height;\n    updateControllerOpts();\n    thisRef.props.onResize({width, height});\n  };\n\n  useEffect(() => {\n    eventManager.setElement(eventCanvasRef.current);\n    // Register event handlers\n    eventManager.on({\n      pointerdown: onPointerDown.bind(thisRef),\n      pointermove: onPointerMove.bind(thisRef),\n      pointerup: onPointerUp.bind(thisRef),\n      pointerleave: onEvent.bind(thisRef, 'onMouseOut'),\n      click: onPointerClick.bind(thisRef),\n      anyclick: onPointerClick.bind(thisRef),\n      dblclick: onEvent.bind(thisRef, 'onDblClick'),\n      wheel: onEvent.bind(thisRef, 'onWheel'),\n      contextmenu: onEvent.bind(thisRef, 'onContextMenu')\n    });\n\n    // Clean up on unmount\n    return () => {\n      eventManager.destroy();\n    };\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    if (viewportUpdateRequested) {\n      // Perform deferred updates\n      handleViewportChange(...viewportUpdateRequested);\n    }\n    if (stateUpdateRequested) {\n      handleInteractionStateChange(stateUpdateRequested);\n    }\n  });\n\n  updateControllerOpts();\n\n  const {width, height, style, getCursor} = props;\n\n  const eventCanvasStyle = useMemo(\n    () => ({\n      position: 'relative',\n      ...style,\n      width,\n      height,\n      cursor: getCursor(thisRef.state)\n    }),\n    [style, width, height, getCursor, thisRef.state]\n  );\n\n  if (!viewportUpdateRequested || !thisRef._child) {\n    // Only rerender if no viewport update has been requested during render.\n    // Otherwise return the last rendered child, and invoke the callback when we're done.\n    thisRef._child = (\n      <MapContextProvider value={context}>\n        <div key=\"event-canvas\" ref={eventCanvasRef} style={eventCanvasStyle}>\n          <StaticMap\n            {...props}\n            width=\"100%\"\n            height=\"100%\"\n            style={null}\n            onResize={onResize}\n            ref={staticMapRef}\n          />\n        </div>\n      </MapContextProvider>\n    );\n  }\n\n  inRender = false;\n  return thisRef._child;\n});\n\nInteractiveMap.supported = StaticMap.supported;\nInteractiveMap.propTypes = propTypes;\nInteractiveMap.defaultProps = defaultProps;\n\nexport default InteractiveMap;\n"]},"metadata":{},"sourceType":"script"}