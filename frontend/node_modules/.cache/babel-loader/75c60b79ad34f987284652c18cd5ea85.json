{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _globals = require(\"../utils/globals\");\n\nvar PropTypes = _interopRequireWildcard(require(\"prop-types\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _mapboxgl = _interopRequireDefault(require(\"../utils/mapboxgl\"));\n\nvar _useMapControl2 = _interopRequireWildcard(require(\"./use-map-control\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar propTypes = Object.assign({}, _useMapControl2.mapControlPropTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  container: PropTypes.object,\n  label: PropTypes.string\n});\nvar defaultProps = Object.assign({}, _useMapControl2.mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  var _useMapControl = (0, _useMapControl2[\"default\"])(props),\n      context = _useMapControl.context,\n      containerRef = _useMapControl.containerRef;\n\n  var _useState = (0, React.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isFullscreen = _useState2[0],\n      setIsFullscreen = _useState2[1];\n\n  var _useState3 = (0, React.useState)(false),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      showButton = _useState4[0],\n      setShowButton = _useState4[1];\n\n  var _useState5 = (0, React.useState)(null),\n      _useState6 = (0, _slicedToArray2[\"default\"])(_useState5, 2),\n      mapboxFullscreenControl = _useState6[0],\n      createMapboxFullscreenControl = _useState6[1];\n\n  (0, React.useEffect)(function () {\n    var control = new _mapboxgl[\"default\"].FullscreenControl();\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    var onFullscreenChange = function onFullscreenChange() {\n      var nextState = !control._fullscreen;\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    _globals.document.addEventListener(control._fullscreenchange, onFullscreenChange);\n\n    return function () {\n      _globals.document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  var onClickFullscreen = function onClickFullscreen() {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  var style = (0, React.useMemo)(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  var className = props.className,\n      label = props.label;\n  var type = isFullscreen ? 'shrink' : 'fullscreen';\n  return React.createElement(\"div\", {\n    style: style,\n    className: className\n  }, React.createElement(\"div\", {\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-group\",\n    ref: containerRef\n  }, React.createElement(\"button\", {\n    key: type,\n    className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n    type: \"button\",\n    title: label,\n    onClick: onClickFullscreen\n  }, React.createElement(\"span\", {\n    className: \"mapboxgl-ctrl-icon\",\n    \"aria-hidden\": \"true\"\n  }))));\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\n\nvar _default = React.memo(FullscreenControl);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:\\Side Projects\\maptravelapp\\frontend\\node_modules\\react-map-gl\\src\\components\\fullscreen-control.js"],"names":["propTypes","mapControlPropTypes","className","PropTypes","style","container","label","string","defaultProps","mapControlDefaultProps","context","containerRef","isFullscreen","setIsFullscreen","showButton","setShowButton","mapboxFullscreenControl","createMapboxFullscreenControl","control","mapboxgl","onFullscreenChange","nextState","document","onClickFullscreen","props","position","type","FullscreenControl","React"],"mappings":";;;;;;;;;;;;;;;AAoBA,IAAA,QAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AAEA,IAAA,eAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkBC,eAAAA,CAAlB,mBAAA,EAAuC;AAEvDC,EAAAA,SAAS,EAAEC,SAAS,CAFmC,MAAA;AAGvDC,EAAAA,KAAK,EAAED,SAAS,CAHuC,MAAA;AAQvDE,EAAAA,SAAS,EAAEF,SAAS,CARmC,MAAA;AASvDG,EAAAA,KAAK,EAAEH,SAAS,CAACI;AATsC,CAAvC,CAAlB;AAYA,IAAMC,YAAY,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkBC,eAAAA,CAAlB,sBAAA,EAA0C;AAC7DP,EAAAA,SAAS,EADoD,EAAA;AAE7DG,EAAAA,SAAS,EAFoD,IAAA;AAG7DC,EAAAA,KAAK,EAAE;AAHsD,CAA1C,CAArB;;AAMA,SAAA,iBAAA,CAAA,KAAA,EAAkC;AAAA,MAAA,cAAA,GACA,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EADA,KACA,CADA;AAAA,MACzBI,OADyB,GAAA,cAAA,CAAA,OAAA;AAAA,MAChBC,YADgB,GAAA,cAAA,CAAA,YAAA;;AAAA,MAAA,SAAA,GAEQ,CAAA,GAAA,KAAA,CAAA,QAAA,EAFR,KAEQ,CAFR;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAEzBC,YAFyB,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAEXC,eAFW,GAAA,UAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,UAAA,GAGI,CAAA,GAAA,KAAA,CAAA,QAAA,EAHJ,KAGI,CAHJ;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAGzBC,UAHyB,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAGbC,aAHa,GAAA,UAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,UAAA,GAIiC,CAAA,GAAA,KAAA,CAAA,QAAA,EAJjC,IAIiC,CAJjC;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAIzBC,uBAJyB,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAIAC,6BAJA,GAAA,UAAA,CAAA,CAAA,CAAA;;AAMhC,GAAA,GAAA,KAAA,CAAA,SAAA,EAAU,YAAM;AACd,QAAMC,OAAO,GAAG,IAAIC,SAAAA,CAAAA,SAAAA,CAAAA,CAApB,iBAAgB,EAAhB;AAEAF,IAAAA,6BAA6B,CAA7BA,OAA6B,CAA7BA;AACAF,IAAAA,aAAa,CAACG,OAAO,CAArBH,uBAAcG,EAAD,CAAbH;;AAEA,QAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,UAAMC,SAAS,GAAG,CAACH,OAAO,CAA1B,WAAA;AAGAA,MAAAA,OAAO,CAAPA,WAAAA,GAAAA,SAAAA;AACAL,MAAAA,eAAe,CAAfA,SAAe,CAAfA;AALF,KAAA;;AAQAS,IAAAA,QAAAA,CAAAA,QAAAA,CAAAA,gBAAAA,CAA0BJ,OAAO,CAAjCI,iBAAAA,EAAAA,kBAAAA;;AAEA,WAAO,YAAM;AACXA,MAAAA,QAAAA,CAAAA,QAAAA,CAAAA,mBAAAA,CAA6BJ,OAAO,CAApCI,iBAAAA,EAAAA,kBAAAA;AADF,KAAA;AAhBF,GAAA,EAAA,EAAA;;AAqBA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,QAAA,uBAAA,EAA6B;AAC3BP,MAAAA,uBAAuB,CAAvBA,UAAAA,GAAqCQ,KAAK,CAALA,SAAAA,IAAmBd,OAAO,CAA/DM,SAAAA;;AACAA,MAAAA,uBAAuB,CAAvBA,kBAAAA;AACD;AAJH,GAAA;;AAOA,MAAMZ,KAAK,GAAG,CAAA,GAAA,KAAA,CAAA,OAAA,EAAQ,YAAA;AAAA,WAAA,aAAA,CAAA;AAAQqB,MAAAA,QAAQ,EAAE;AAAlB,KAAA,EAAiCD,KAAK,CAAtC,KAAA,CAAA;AAAR,GAAA,EAAwD,CAACA,KAAK,CAA5E,KAAsE,CAAxD,CAAd;;AAEA,MAAI,CAAJ,UAAA,EAAiB;AACf,WAAA,IAAA;AACD;;AAtC+B,MAwCzBtB,SAxCyB,GAwCLsB,KAxCK,CAAA,SAAA;AAAA,MAwCdlB,KAxCc,GAwCLkB,KAxCK,CAAA,KAAA;AAyChC,MAAME,IAAI,GAAGd,YAAY,GAAA,QAAA,GAAzB,YAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAV,KAAA;AAAmB,IAAA,SAAS,EAAEV;AAA9B,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAd,mCAAA;AAAmD,IAAA,GAAG,EAAES;AAAxD,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,IAAA,GAAG,EADL,IAAA;AAEE,IAAA,SAAS,EAAA,oCAAA,MAAA,CAFX,IAEW,CAFX;AAGE,IAAA,IAAI,EAHN,QAAA;AAIE,IAAA,KAAK,EAJP,KAAA;AAKE,IAAA,OAAO,EAAEY;AALX,GAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAf,oBAAA;AAAqC,mBAAY;AAAjD,GAAA,CAPF,CADF,CADF,CADF;AAeD;;AAEDI,iBAAiB,CAAjBA,SAAAA,GAAAA,SAAAA;AACAA,iBAAiB,CAAjBA,YAAAA,GAAAA,YAAAA;;eAEeC,KAAK,CAALA,IAAAA,CAAAA,iBAAAA,C","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useEffect, useState, useMemo} from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n  const [mapboxFullscreenControl, createMapboxFullscreenControl] = useState(null);\n\n  useEffect(() => {\n    const control = new mapboxgl.FullscreenControl();\n\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    const onFullscreenChange = () => {\n      const nextState = !control._fullscreen;\n      // this is a hack\n      // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n\n    return () => {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  const onClickFullscreen = () => {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  const {className, label} = props;\n  const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n  return (\n    <div style={style} className={className}>\n      <div className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key={type}\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n          type=\"button\"\n          title={label}\n          onClick={onClickFullscreen}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\n\nexport default React.memo(FullscreenControl);\n"]},"metadata":{},"sourceType":"script"}