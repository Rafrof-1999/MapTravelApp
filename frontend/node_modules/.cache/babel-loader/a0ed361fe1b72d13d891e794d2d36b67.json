{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar PropTypes = _interopRequireWildcard(require(\"prop-types\"));\n\nvar _mapboxgl = _interopRequireDefault(require(\"../utils/mapboxgl\"));\n\nvar _useMapControl2 = _interopRequireWildcard(require(\"./use-map-control\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar propTypes = Object.assign({}, _useMapControl2.mapControlPropTypes, {\n  toggleLabel: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  compact: PropTypes.bool,\n  customAttribution: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\nvar defaultProps = Object.assign({}, _useMapControl2.mapControlDefaultProps, {\n  className: '',\n  toggleLabel: 'Toggle Attribution'\n});\n\nfunction setupAttributioncontrol(opts, map, container, attributionContainer) {\n  var control = new _mapboxgl[\"default\"].AttributionControl(opts);\n  control._map = map;\n  control._container = container;\n  control._innerContainer = attributionContainer;\n\n  control._updateAttributions();\n\n  control._updateEditLink();\n\n  map.on('styledata', control._updateData);\n  map.on('sourcedata', control._updateData);\n  return control;\n}\n\nfunction removeAttributionControl(control) {\n  control._map.off('styledata', control._updateData);\n\n  control._map.off('sourcedata', control._updateData);\n}\n\nfunction AttributionControl(props) {\n  var _useMapControl = (0, _useMapControl2[\"default\"])(props),\n      context = _useMapControl.context,\n      containerRef = _useMapControl.containerRef;\n\n  var innerContainerRef = (0, React.useRef)(null);\n\n  var _useState = (0, React.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      showCompact = _useState2[0],\n      setShowCompact = _useState2[1];\n\n  (0, React.useEffect)(function () {\n    var control;\n\n    if (context.map) {\n      control = setupAttributioncontrol({\n        customAttribution: props.customAttribution\n      }, context.map, containerRef.current, innerContainerRef.current);\n    }\n\n    return function () {\n      return control && removeAttributionControl(control);\n    };\n  }, [context.map]);\n  var compact = props.compact === undefined ? context.viewport.width <= 640 : props.compact;\n  (0, React.useEffect)(function () {\n    if (!compact && showCompact) {\n      setShowCompact(false);\n    }\n  }, [compact]);\n  var toggleAttribution = (0, React.useCallback)(function () {\n    return setShowCompact(function (value) {\n      return !value;\n    });\n  }, []);\n  var style = (0, React.useMemo)(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  return React.createElement(\"div\", {\n    style: style,\n    className: props.className\n  }, React.createElement(\"div\", {\n    ref: containerRef,\n    \"aria-pressed\": showCompact,\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-attrib \".concat(compact ? 'mapboxgl-compact' : '', \" \").concat(showCompact ? 'mapboxgl-compact-show' : '')\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"mapboxgl-ctrl-attrib-button\",\n    title: props.toggleLabel,\n    onClick: toggleAttribution\n  }), React.createElement(\"div\", {\n    ref: innerContainerRef,\n    className: \"mapboxgl-ctrl-attrib-inner\",\n    role: \"list\"\n  })));\n}\n\nAttributionControl.propTypes = propTypes;\nAttributionControl.defaultProps = defaultProps;\n\nvar _default = React.memo(AttributionControl);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:\\Side Projects\\maptravelapp\\frontend\\node_modules\\react-map-gl\\src\\components\\attribution-control.js"],"names":["propTypes","mapControlPropTypes","toggleLabel","PropTypes","className","style","compact","customAttribution","defaultProps","mapControlDefaultProps","control","mapboxgl","map","context","containerRef","innerContainerRef","showCompact","setShowCompact","setupAttributioncontrol","props","removeAttributionControl","toggleAttribution","position","AttributionControl","React"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {useEffect, useCallback, useState, useRef, useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  toggleLabel: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  compact: PropTypes.bool,\n  customAttribution: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  toggleLabel: 'Toggle Attribution'\n});\n\nfunction setupAttributioncontrol(opts, map, container, attributionContainer) {\n  const control = new mapboxgl.AttributionControl(opts);\n  control._map = map;\n  control._container = container;\n  control._innerContainer = attributionContainer;\n\n  // from AttributionControl.onAdd()\n  control._updateAttributions();\n  control._updateEditLink();\n  map.on('styledata', control._updateData);\n  map.on('sourcedata', control._updateData);\n\n  return control;\n}\n\nfunction removeAttributionControl(control) {\n  control._map.off('styledata', control._updateData);\n  control._map.off('sourcedata', control._updateData);\n}\n\nfunction AttributionControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const innerContainerRef = useRef(null);\n  const [showCompact, setShowCompact] = useState(false);\n\n  useEffect(() => {\n    let control;\n    if (context.map) {\n      control = setupAttributioncontrol(\n        {\n          customAttribution: props.customAttribution\n        },\n        context.map,\n        containerRef.current,\n        innerContainerRef.current\n      );\n    }\n\n    return () => control && removeAttributionControl(control);\n  }, [context.map]);\n\n  const compact = props.compact === undefined ? context.viewport.width <= 640 : props.compact;\n\n  useEffect(() => {\n    if (!compact && showCompact) {\n      setShowCompact(false);\n    }\n  }, [compact]);\n\n  const toggleAttribution = useCallback(() => setShowCompact(value => !value), []);\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  return (\n    <div style={style} className={props.className}>\n      <div\n        ref={containerRef}\n        aria-pressed={showCompact}\n        className={`mapboxgl-ctrl mapboxgl-ctrl-attrib ${compact ? 'mapboxgl-compact' : ''} ${\n          showCompact ? 'mapboxgl-compact-show' : ''\n        }`}\n      >\n        <button\n          type=\"button\"\n          className=\"mapboxgl-ctrl-attrib-button\"\n          title={props.toggleLabel}\n          onClick={toggleAttribution}\n        />\n        <div ref={innerContainerRef} className=\"mapboxgl-ctrl-attrib-inner\" role=\"list\" />\n      </div>\n    </div>\n  );\n}\n\nAttributionControl.propTypes = propTypes;\nAttributionControl.defaultProps = defaultProps;\n\nexport default React.memo(AttributionControl);\n"]},"metadata":{},"sourceType":"script"}